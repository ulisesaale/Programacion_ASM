

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sat Mar 19 19:22:55 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    18  0000                     
    19                           ; Version 2.40
    20                           ; Generated 17/11/2021 GMT
    21                           ; 
    22                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4550 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	idataCOMRAM
    56  007DFC                     __pidataCOMRAM:
    57                           	callstack 0
    58                           
    59                           ;initializer for _display
    60  007DFC  3F                 	db	63
    61  007DFD  06                 	db	6
    62  007DFE  5B                 	db	91
    63  007DFF  4F                 	db	79
    64  007E00  66                 	db	102
    65  007E01  6D                 	db	109
    66  007E02  7D                 	db	125
    67  007E03  07                 	db	7
    68  007E04  7F                 	db	127
    69  007E05  6F                 	db	111
    70                           
    71                           	psect	nvCOMRAM
    72  000015                     __pnvCOMRAM:
    73                           	callstack 0
    74  000015                     _uni:
    75                           	callstack 0
    76  000015                     	ds	1
    77  000016                     _dec:
    78                           	callstack 0
    79  000016                     	ds	1
    80  000017                     _cen:
    81                           	callstack 0
    82  000017                     	ds	1
    83  000018                     _mil:
    84                           	callstack 0
    85  000018                     	ds	1
    86  0000                     _PORTB	set	3969
    87  0000                     _LATD	set	3980
    88  0000                     _TRISD	set	3989
    89  0000                     _TRISB	set	3987
    90  0000                     _LATB	set	3978
    91                           
    92                           ; #config settings
    93                           
    94                           	psect	cinit
    95  007E06                     __pcinit:
    96                           	callstack 0
    97  007E06                     start_initialization:
    98                           	callstack 0
    99  007E06                     __initialization:
   100                           	callstack 0
   101                           
   102                           ; Initialize objects allocated to COMRAM (10 bytes)
   103                           ; load TBLPTR registers with __pidataCOMRAM
   104  007E06  0EFC               	movlw	low __pidataCOMRAM
   105  007E08  6EF6               	movwf	tblptrl,c
   106  007E0A  0E7D               	movlw	high __pidataCOMRAM
   107  007E0C  6EF7               	movwf	tblptrh,c
   108  007E0E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   109  007E10  6EF8               	movwf	tblptru,c
   110  007E12  EE00  F001         	lfsr	0,__pdataCOMRAM
   111  007E16  EE10 F00A          	lfsr	1,10
   112  007E1A                     copy_data0:
   113  007E1A  0009               	tblrd		*+
   114  007E1C  CFF5 FFEE          	movff	tablat,postinc0
   115  007E20  50E5               	movf	postdec1,w,c
   116  007E22  50E1               	movf	fsr1l,w,c
   117  007E24  E1FA               	bnz	copy_data0
   118  007E26                     end_of_initialization:
   119                           	callstack 0
   120  007E26                     __end_of__initialization:
   121                           	callstack 0
   122  007E26  0100               	movlb	0
   123  007E28  EFAD  F03F         	goto	_main	;jump to C main() function
   124                           
   125                           	psect	dataCOMRAM
   126  000001                     __pdataCOMRAM:
   127                           	callstack 0
   128  000001                     _display:
   129                           	callstack 0
   130  000001                     	ds	10
   131                           
   132                           	psect	cstackCOMRAM
   133  00000B                     __pcstackCOMRAM:
   134                           	callstack 0
   135  00000B                     ?___lwdiv:
   136                           	callstack 0
   137  00000B                     ?___lwmod:
   138                           	callstack 0
   139  00000B                     ___lwdiv@dividend:
   140                           	callstack 0
   141  00000B                     ___lwmod@dividend:
   142                           	callstack 0
   143                           
   144                           ; 2 bytes @ 0x0
   145  00000B                     	ds	2
   146  00000D                     ___lwdiv@divisor:
   147                           	callstack 0
   148  00000D                     ___lwmod@divisor:
   149                           	callstack 0
   150                           
   151                           ; 2 bytes @ 0x2
   152  00000D                     	ds	2
   153  00000F                     ___lwmod@counter:
   154                           	callstack 0
   155  00000F                     ___lwdiv@quotient:
   156                           	callstack 0
   157                           
   158                           ; 2 bytes @ 0x4
   159  00000F                     	ds	2
   160  000011                     ___lwdiv@counter:
   161                           	callstack 0
   162                           
   163                           ; 1 bytes @ 0x6
   164  000011                     	ds	1
   165  000012                     descomponerNumero@numero:
   166                           	callstack 0
   167                           
   168                           ; 2 bytes @ 0x7
   169  000012                     	ds	2
   170  000014                     ??_main:
   171                           
   172                           ; 1 bytes @ 0x9
   173  000014                     	ds	1
   174                           
   175 ;;
   176 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   177 ;;
   178 ;; *************** function _main *****************
   179 ;; Defined at:
   180 ;;		line 92 in file "main.c"
   181 ;; Parameters:    Size  Location     Type
   182 ;;		None
   183 ;; Auto vars:     Size  Location     Type
   184 ;;		None
   185 ;; Return value:  Size  Location     Type
   186 ;;                  1    wreg      void 
   187 ;; Registers used:
   188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   189 ;; Tracked objects:
   190 ;;		On entry : 0/0
   191 ;;		On exit  : 0/0
   192 ;;		Unchanged: 0/0
   193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   194 ;;      Params:         0       0       0       0       0       0       0       0       0
   195 ;;      Locals:         0       0       0       0       0       0       0       0       0
   196 ;;      Temps:          1       0       0       0       0       0       0       0       0
   197 ;;      Totals:         1       0       0       0       0       0       0       0       0
   198 ;;Total ram usage:        1 bytes
   199 ;; Hardware stack levels required when called: 2
   200 ;; This function calls:
   201 ;;		_descomponerNumero
   202 ;; This function is called by:
   203 ;;		Startup code after reset
   204 ;; This function uses a non-reentrant model
   205 ;;
   206                           
   207                           	psect	text0
   208  007F5A                     __ptext0:
   209                           	callstack 0
   210  007F5A                     _main:
   211                           	callstack 29
   212                           
   213                           ;main.c: 95: TRISD = 0;
   214                           
   215                           ;incstack = 0
   216  007F5A  0E00               	movlw	0
   217  007F5C  6E95               	movwf	149,c	;volatile
   218                           
   219                           ;main.c: 96: LATD = 0;
   220  007F5E  0E00               	movlw	0
   221  007F60  6E8C               	movwf	140,c	;volatile
   222                           
   223                           ;main.c: 97: TRISB = 0;
   224  007F62  0E00               	movlw	0
   225  007F64  6E93               	movwf	147,c	;volatile
   226                           
   227                           ;main.c: 98: PORTB = 0;
   228  007F66  0E00               	movlw	0
   229  007F68  6E81               	movwf	129,c	;volatile
   230  007F6A                     l891:
   231                           
   232                           ;main.c: 102: descomponerNumero(7895);
   233  007F6A  0E1E               	movlw	30
   234  007F6C  6E13               	movwf	(descomponerNumero@numero+1)^0,c
   235  007F6E  0ED7               	movlw	215
   236  007F70  6E12               	movwf	descomponerNumero@numero^0,c
   237  007F72  EC60  F03F         	call	_descomponerNumero	;wreg free
   238                           
   239                           ;main.c: 104: LATD= display[mil];
   240  007F76  0E01               	movlw	low _display
   241  007F78  2418               	addwf	_mil^0,w,c
   242  007F7A  6ED9               	movwf	fsr2l,c
   243  007F7C  6ADA               	clrf	fsr2h,c
   244  007F7E  0E00               	movlw	high _display
   245  007F80  22DA               	addwfc	fsr2h,f,c
   246  007F82  50DF               	movf	indf2,w,c
   247  007F84  6E8C               	movwf	140,c	;volatile
   248                           
   249                           ;main.c: 105: LATB = 0X01;
   250  007F86  0E01               	movlw	1
   251  007F88  6E8A               	movwf	138,c	;volatile
   252                           
   253                           ;main.c: 106: _delay((unsigned long)((2)*(20000000/4000.0)));
   254  007F8A  0E0D               	movlw	13
   255  007F8C  6E14               	movwf	??_main^0,c
   256  007F8E  0EFC               	movlw	252
   257  007F90                     u137:
   258  007F90  2EE8               	decfsz	wreg,f,c
   259  007F92  D7FE               	bra	u137
   260  007F94  2E14               	decfsz	??_main^0,f,c
   261  007F96  D7FC               	bra	u137
   262                           
   263                           ;main.c: 108: LATD= display[cen];
   264  007F98  0E01               	movlw	low _display
   265  007F9A  2417               	addwf	_cen^0,w,c
   266  007F9C  6ED9               	movwf	fsr2l,c
   267  007F9E  6ADA               	clrf	fsr2h,c
   268  007FA0  0E00               	movlw	high _display
   269  007FA2  22DA               	addwfc	fsr2h,f,c
   270  007FA4  50DF               	movf	indf2,w,c
   271  007FA6  6E8C               	movwf	140,c	;volatile
   272                           
   273                           ;main.c: 109: LATB = 0X02;
   274  007FA8  0E02               	movlw	2
   275  007FAA  6E8A               	movwf	138,c	;volatile
   276                           
   277                           ;main.c: 110: _delay((unsigned long)((2)*(20000000/4000.0)));
   278  007FAC  0E0D               	movlw	13
   279  007FAE  6E14               	movwf	??_main^0,c
   280  007FB0  0EFC               	movlw	252
   281  007FB2                     u147:
   282  007FB2  2EE8               	decfsz	wreg,f,c
   283  007FB4  D7FE               	bra	u147
   284  007FB6  2E14               	decfsz	??_main^0,f,c
   285  007FB8  D7FC               	bra	u147
   286                           
   287                           ;main.c: 112: LATD= display[dec];
   288  007FBA  0E01               	movlw	low _display
   289  007FBC  2416               	addwf	_dec^0,w,c
   290  007FBE  6ED9               	movwf	fsr2l,c
   291  007FC0  6ADA               	clrf	fsr2h,c
   292  007FC2  0E00               	movlw	high _display
   293  007FC4  22DA               	addwfc	fsr2h,f,c
   294  007FC6  50DF               	movf	indf2,w,c
   295  007FC8  6E8C               	movwf	140,c	;volatile
   296                           
   297                           ;main.c: 113: LATB = 0X04;
   298  007FCA  0E04               	movlw	4
   299  007FCC  6E8A               	movwf	138,c	;volatile
   300                           
   301                           ;main.c: 114: _delay((unsigned long)((2)*(20000000/4000.0)));
   302  007FCE  0E0D               	movlw	13
   303  007FD0  6E14               	movwf	??_main^0,c
   304  007FD2  0EFC               	movlw	252
   305  007FD4                     u157:
   306  007FD4  2EE8               	decfsz	wreg,f,c
   307  007FD6  D7FE               	bra	u157
   308  007FD8  2E14               	decfsz	??_main^0,f,c
   309  007FDA  D7FC               	bra	u157
   310                           
   311                           ;main.c: 116: LATD= display[uni];
   312  007FDC  0E01               	movlw	low _display
   313  007FDE  2415               	addwf	_uni^0,w,c
   314  007FE0  6ED9               	movwf	fsr2l,c
   315  007FE2  6ADA               	clrf	fsr2h,c
   316  007FE4  0E00               	movlw	high _display
   317  007FE6  22DA               	addwfc	fsr2h,f,c
   318  007FE8  50DF               	movf	indf2,w,c
   319  007FEA  6E8C               	movwf	140,c	;volatile
   320                           
   321                           ;main.c: 117: LATB = 0X08;
   322  007FEC  0E08               	movlw	8
   323  007FEE  6E8A               	movwf	138,c	;volatile
   324                           
   325                           ;main.c: 118: _delay((unsigned long)((2)*(20000000/4000.0)));
   326  007FF0  0E0D               	movlw	13
   327  007FF2  6E14               	movwf	??_main^0,c
   328  007FF4  0EFC               	movlw	252
   329  007FF6                     u167:
   330  007FF6  2EE8               	decfsz	wreg,f,c
   331  007FF8  D7FE               	bra	u167
   332  007FFA  2E14               	decfsz	??_main^0,f,c
   333  007FFC  D7FC               	bra	u167
   334  007FFE  D7B5               	goto	l891
   335  008000                     __end_of_main:
   336                           	callstack 0
   337                           
   338 ;; *************** function _descomponerNumero *****************
   339 ;; Defined at:
   340 ;;		line 81 in file "main.c"
   341 ;; Parameters:    Size  Location     Type
   342 ;;  numero          2    7[COMRAM] unsigned int 
   343 ;; Auto vars:     Size  Location     Type
   344 ;;		None
   345 ;; Return value:  Size  Location     Type
   346 ;;                  1    wreg      void 
   347 ;; Registers used:
   348 ;;		wreg, status,2, status,0, cstack
   349 ;; Tracked objects:
   350 ;;		On entry : 0/0
   351 ;;		On exit  : 0/0
   352 ;;		Unchanged: 0/0
   353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   354 ;;      Params:         2       0       0       0       0       0       0       0       0
   355 ;;      Locals:         0       0       0       0       0       0       0       0       0
   356 ;;      Temps:          0       0       0       0       0       0       0       0       0
   357 ;;      Totals:         2       0       0       0       0       0       0       0       0
   358 ;;Total ram usage:        2 bytes
   359 ;; Hardware stack levels used: 1
   360 ;; Hardware stack levels required when called: 1
   361 ;; This function calls:
   362 ;;		___lwdiv
   363 ;;		___lwmod
   364 ;; This function is called by:
   365 ;;		_main
   366 ;; This function uses a non-reentrant model
   367 ;;
   368                           
   369                           	psect	text1
   370  007EC0                     __ptext1:
   371                           	callstack 0
   372  007EC0                     _descomponerNumero:
   373                           	callstack 29
   374                           
   375                           ;main.c: 83: mil = numero/1000;
   376                           
   377                           ;incstack = 0
   378  007EC0  C012  F00B         	movff	descomponerNumero@numero,___lwdiv@dividend
   379  007EC4  C013  F00C         	movff	descomponerNumero@numero+1,___lwdiv@dividend+1
   380  007EC8  0E03               	movlw	3
   381  007ECA  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
   382  007ECC  0EE8               	movlw	232
   383  007ECE  6E0D               	movwf	___lwdiv@divisor^0,c
   384  007ED0  EC37  F03F         	call	___lwdiv	;wreg free
   385  007ED4  500B               	movf	?___lwdiv^0,w,c
   386  007ED6  6E18               	movwf	_mil^0,c
   387                           
   388                           ;main.c: 84: numero = numero % 1000;
   389  007ED8  C012  F00B         	movff	descomponerNumero@numero,___lwmod@dividend
   390  007EDC  C013  F00C         	movff	descomponerNumero@numero+1,___lwmod@dividend+1
   391  007EE0  0E03               	movlw	3
   392  007EE2  6E0E               	movwf	(___lwmod@divisor+1)^0,c
   393  007EE4  0EE8               	movlw	232
   394  007EE6  6E0D               	movwf	___lwmod@divisor^0,c
   395  007EE8  EC16  F03F         	call	___lwmod	;wreg free
   396  007EEC  C00B  F012         	movff	?___lwmod,descomponerNumero@numero
   397  007EF0  C00C  F013         	movff	?___lwmod+1,descomponerNumero@numero+1
   398                           
   399                           ;main.c: 85: cen = numero/100;
   400  007EF4  C012  F00B         	movff	descomponerNumero@numero,___lwdiv@dividend
   401  007EF8  C013  F00C         	movff	descomponerNumero@numero+1,___lwdiv@dividend+1
   402  007EFC  0E00               	movlw	0
   403  007EFE  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
   404  007F00  0E64               	movlw	100
   405  007F02  6E0D               	movwf	___lwdiv@divisor^0,c
   406  007F04  EC37  F03F         	call	___lwdiv	;wreg free
   407  007F08  500B               	movf	?___lwdiv^0,w,c
   408  007F0A  6E17               	movwf	_cen^0,c
   409                           
   410                           ;main.c: 86: numero = numero % 100;
   411  007F0C  C012  F00B         	movff	descomponerNumero@numero,___lwmod@dividend
   412  007F10  C013  F00C         	movff	descomponerNumero@numero+1,___lwmod@dividend+1
   413  007F14  0E00               	movlw	0
   414  007F16  6E0E               	movwf	(___lwmod@divisor+1)^0,c
   415  007F18  0E64               	movlw	100
   416  007F1A  6E0D               	movwf	___lwmod@divisor^0,c
   417  007F1C  EC16  F03F         	call	___lwmod	;wreg free
   418  007F20  C00B  F012         	movff	?___lwmod,descomponerNumero@numero
   419  007F24  C00C  F013         	movff	?___lwmod+1,descomponerNumero@numero+1
   420                           
   421                           ;main.c: 87: dec = numero/10;
   422  007F28  C012  F00B         	movff	descomponerNumero@numero,___lwdiv@dividend
   423  007F2C  C013  F00C         	movff	descomponerNumero@numero+1,___lwdiv@dividend+1
   424  007F30  0E00               	movlw	0
   425  007F32  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
   426  007F34  0E0A               	movlw	10
   427  007F36  6E0D               	movwf	___lwdiv@divisor^0,c
   428  007F38  EC37  F03F         	call	___lwdiv	;wreg free
   429  007F3C  500B               	movf	?___lwdiv^0,w,c
   430  007F3E  6E16               	movwf	_dec^0,c
   431                           
   432                           ;main.c: 88: uni = numero % 10;
   433  007F40  C012  F00B         	movff	descomponerNumero@numero,___lwmod@dividend
   434  007F44  C013  F00C         	movff	descomponerNumero@numero+1,___lwmod@dividend+1
   435  007F48  0E00               	movlw	0
   436  007F4A  6E0E               	movwf	(___lwmod@divisor+1)^0,c
   437  007F4C  0E0A               	movlw	10
   438  007F4E  6E0D               	movwf	___lwmod@divisor^0,c
   439  007F50  EC16  F03F         	call	___lwmod	;wreg free
   440  007F54  500B               	movf	?___lwmod^0,w,c
   441  007F56  6E15               	movwf	_uni^0,c
   442  007F58  0012               	return		;funcret
   443  007F5A                     __end_of_descomponerNumero:
   444                           	callstack 0
   445                           
   446 ;; *************** function ___lwmod *****************
   447 ;; Defined at:
   448 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
   449 ;; Parameters:    Size  Location     Type
   450 ;;  dividend        2    0[COMRAM] unsigned int 
   451 ;;  divisor         2    2[COMRAM] unsigned int 
   452 ;; Auto vars:     Size  Location     Type
   453 ;;  counter         1    4[COMRAM] unsigned char 
   454 ;; Return value:  Size  Location     Type
   455 ;;                  2    0[COMRAM] unsigned int 
   456 ;; Registers used:
   457 ;;		wreg, status,2, status,0
   458 ;; Tracked objects:
   459 ;;		On entry : 0/0
   460 ;;		On exit  : 0/0
   461 ;;		Unchanged: 0/0
   462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   463 ;;      Params:         4       0       0       0       0       0       0       0       0
   464 ;;      Locals:         1       0       0       0       0       0       0       0       0
   465 ;;      Temps:          0       0       0       0       0       0       0       0       0
   466 ;;      Totals:         5       0       0       0       0       0       0       0       0
   467 ;;Total ram usage:        5 bytes
   468 ;; Hardware stack levels used: 1
   469 ;; This function calls:
   470 ;;		Nothing
   471 ;; This function is called by:
   472 ;;		_descomponerNumero
   473 ;; This function uses a non-reentrant model
   474 ;;
   475                           
   476                           	psect	text2
   477  007E2C                     __ptext2:
   478                           	callstack 0
   479  007E2C                     ___lwmod:
   480                           	callstack 29
   481                           
   482                           ;incstack = 0
   483  007E2C  500D               	movf	___lwmod@divisor^0,w,c
   484  007E2E  100E               	iorwf	(___lwmod@divisor+1)^0,w,c
   485  007E30  B4D8               	btfsc	status,2,c
   486  007E32  D018               	goto	l525
   487  007E34  0E01               	movlw	1
   488  007E36  6E0F               	movwf	___lwmod@counter^0,c
   489  007E38  D004               	goto	l877
   490  007E3A                     l875:
   491  007E3A  90D8               	bcf	status,0,c
   492  007E3C  360D               	rlcf	___lwmod@divisor^0,f,c
   493  007E3E  360E               	rlcf	(___lwmod@divisor+1)^0,f,c
   494  007E40  2A0F               	incf	___lwmod@counter^0,f,c
   495  007E42                     l877:
   496  007E42  AE0E               	btfss	(___lwmod@divisor+1)^0,7,c
   497  007E44  D7FA               	goto	l875
   498  007E46                     u110:
   499  007E46  500D               	movf	___lwmod@divisor^0,w,c
   500  007E48  5C0B               	subwf	___lwmod@dividend^0,w,c
   501  007E4A  500E               	movf	(___lwmod@divisor+1)^0,w,c
   502  007E4C  580C               	subwfb	(___lwmod@dividend+1)^0,w,c
   503  007E4E  A0D8               	btfss	status,0,c
   504  007E50  D004               	goto	l883
   505  007E52  500D               	movf	___lwmod@divisor^0,w,c
   506  007E54  5E0B               	subwf	___lwmod@dividend^0,f,c
   507  007E56  500E               	movf	(___lwmod@divisor+1)^0,w,c
   508  007E58  5A0C               	subwfb	(___lwmod@dividend+1)^0,f,c
   509  007E5A                     l883:
   510  007E5A  90D8               	bcf	status,0,c
   511  007E5C  320E               	rrcf	(___lwmod@divisor+1)^0,f,c
   512  007E5E  320D               	rrcf	___lwmod@divisor^0,f,c
   513  007E60  2E0F               	decfsz	___lwmod@counter^0,f,c
   514  007E62  D7F1               	goto	u110
   515  007E64                     l525:
   516  007E64  C00B  F00B         	movff	___lwmod@dividend,?___lwmod
   517  007E68  C00C  F00C         	movff	___lwmod@dividend+1,?___lwmod+1
   518  007E6C  0012               	return		;funcret
   519  007E6E                     __end_of___lwmod:
   520                           	callstack 0
   521                           
   522 ;; *************** function ___lwdiv *****************
   523 ;; Defined at:
   524 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
   525 ;; Parameters:    Size  Location     Type
   526 ;;  dividend        2    0[COMRAM] unsigned int 
   527 ;;  divisor         2    2[COMRAM] unsigned int 
   528 ;; Auto vars:     Size  Location     Type
   529 ;;  quotient        2    4[COMRAM] unsigned int 
   530 ;;  counter         1    6[COMRAM] unsigned char 
   531 ;; Return value:  Size  Location     Type
   532 ;;                  2    0[COMRAM] unsigned int 
   533 ;; Registers used:
   534 ;;		wreg, status,2, status,0
   535 ;; Tracked objects:
   536 ;;		On entry : 0/0
   537 ;;		On exit  : 0/0
   538 ;;		Unchanged: 0/0
   539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   540 ;;      Params:         4       0       0       0       0       0       0       0       0
   541 ;;      Locals:         3       0       0       0       0       0       0       0       0
   542 ;;      Temps:          0       0       0       0       0       0       0       0       0
   543 ;;      Totals:         7       0       0       0       0       0       0       0       0
   544 ;;Total ram usage:        7 bytes
   545 ;; Hardware stack levels used: 1
   546 ;; This function calls:
   547 ;;		Nothing
   548 ;; This function is called by:
   549 ;;		_descomponerNumero
   550 ;; This function uses a non-reentrant model
   551 ;;
   552                           
   553                           	psect	text3
   554  007E6E                     __ptext3:
   555                           	callstack 0
   556  007E6E                     ___lwdiv:
   557                           	callstack 29
   558                           
   559                           ;incstack = 0
   560  007E6E  0E00               	movlw	0
   561  007E70  6E10               	movwf	(___lwdiv@quotient+1)^0,c
   562  007E72  0E00               	movlw	0
   563  007E74  6E0F               	movwf	___lwdiv@quotient^0,c
   564  007E76  500D               	movf	___lwdiv@divisor^0,w,c
   565  007E78  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
   566  007E7A  B4D8               	btfsc	status,2,c
   567  007E7C  D01C               	goto	l515
   568  007E7E  0E01               	movlw	1
   569  007E80  6E11               	movwf	___lwdiv@counter^0,c
   570  007E82  D004               	goto	l857
   571  007E84                     l855:
   572  007E84  90D8               	bcf	status,0,c
   573  007E86  360D               	rlcf	___lwdiv@divisor^0,f,c
   574  007E88  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
   575  007E8A  2A11               	incf	___lwdiv@counter^0,f,c
   576  007E8C                     l857:
   577  007E8C  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
   578  007E8E  D7FA               	goto	l855
   579  007E90                     u80:
   580  007E90  90D8               	bcf	status,0,c
   581  007E92  360F               	rlcf	___lwdiv@quotient^0,f,c
   582  007E94  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
   583  007E96  500D               	movf	___lwdiv@divisor^0,w,c
   584  007E98  5C0B               	subwf	___lwdiv@dividend^0,w,c
   585  007E9A  500E               	movf	(___lwdiv@divisor+1)^0,w,c
   586  007E9C  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
   587  007E9E  A0D8               	btfss	status,0,c
   588  007EA0  D005               	goto	l867
   589  007EA2  500D               	movf	___lwdiv@divisor^0,w,c
   590  007EA4  5E0B               	subwf	___lwdiv@dividend^0,f,c
   591  007EA6  500E               	movf	(___lwdiv@divisor+1)^0,w,c
   592  007EA8  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
   593  007EAA  800F               	bsf	___lwdiv@quotient^0,0,c
   594  007EAC                     l867:
   595  007EAC  90D8               	bcf	status,0,c
   596  007EAE  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
   597  007EB0  320D               	rrcf	___lwdiv@divisor^0,f,c
   598  007EB2  2E11               	decfsz	___lwdiv@counter^0,f,c
   599  007EB4  D7ED               	goto	u80
   600  007EB6                     l515:
   601  007EB6  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
   602  007EBA  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
   603  007EBE  0012               	return		;funcret
   604  007EC0                     __end_of___lwdiv:
   605                           	callstack 0
   606  0000                     
   607                           	psect	rparam
   608  0000                     
   609                           	psect	idloc
   610                           
   611                           ;Config register IDLOC0 @ 0x200000
   612                           ;	unspecified, using default values
   613  200000                     	org	2097152
   614  200000  FF                 	db	255
   615                           
   616                           ;Config register IDLOC1 @ 0x200001
   617                           ;	unspecified, using default values
   618  200001                     	org	2097153
   619  200001  FF                 	db	255
   620                           
   621                           ;Config register IDLOC2 @ 0x200002
   622                           ;	unspecified, using default values
   623  200002                     	org	2097154
   624  200002  FF                 	db	255
   625                           
   626                           ;Config register IDLOC3 @ 0x200003
   627                           ;	unspecified, using default values
   628  200003                     	org	2097155
   629  200003  FF                 	db	255
   630                           
   631                           ;Config register IDLOC4 @ 0x200004
   632                           ;	unspecified, using default values
   633  200004                     	org	2097156
   634  200004  FF                 	db	255
   635                           
   636                           ;Config register IDLOC5 @ 0x200005
   637                           ;	unspecified, using default values
   638  200005                     	org	2097157
   639  200005  FF                 	db	255
   640                           
   641                           ;Config register IDLOC6 @ 0x200006
   642                           ;	unspecified, using default values
   643  200006                     	org	2097158
   644  200006  FF                 	db	255
   645                           
   646                           ;Config register IDLOC7 @ 0x200007
   647                           ;	unspecified, using default values
   648  200007                     	org	2097159
   649  200007  FF                 	db	255
   650                           
   651                           	psect	config
   652                           
   653                           ;Config register CONFIG1L @ 0x300000
   654                           ;	PLL Prescaler Selection bits
   655                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   656                           ;	System Clock Postscaler Selection bits
   657                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   658                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   659                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   660  300000                     	org	3145728
   661  300000  00                 	db	0
   662                           
   663                           ;Config register CONFIG1H @ 0x300001
   664                           ;	Oscillator Selection bits
   665                           ;	FOSC = HS, HS oscillator (HS)
   666                           ;	Fail-Safe Clock Monitor Enable bit
   667                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   668                           ;	Internal/External Oscillator Switchover bit
   669                           ;	IESO = OFF, Oscillator Switchover mode disabled
   670  300001                     	org	3145729
   671  300001  0C                 	db	12
   672                           
   673                           ;Config register CONFIG2L @ 0x300002
   674                           ;	Power-up Timer Enable bit
   675                           ;	PWRT = ON, PWRT enabled
   676                           ;	Brown-out Reset Enable bits
   677                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   678                           ;	Brown-out Reset Voltage bits
   679                           ;	BORV = 3, Minimum setting 2.05V
   680                           ;	USB Voltage Regulator Enable bit
   681                           ;	VREGEN = OFF, USB voltage regulator disabled
   682  300002                     	org	3145730
   683  300002  18                 	db	24
   684                           
   685                           ;Config register CONFIG2H @ 0x300003
   686                           ;	Watchdog Timer Enable bit
   687                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   688                           ;	Watchdog Timer Postscale Select bits
   689                           ;	WDTPS = 32768, 1:32768
   690  300003                     	org	3145731
   691  300003  1E                 	db	30
   692                           
   693                           ; Padding undefined space
   694  300004                     	org	3145732
   695  300004  FF                 	db	255
   696                           
   697                           ;Config register CONFIG3H @ 0x300005
   698                           ;	CCP2 MUX bit
   699                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   700                           ;	PORTB A/D Enable bit
   701                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
   702                           ;	Low-Power Timer 1 Oscillator Enable bit
   703                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   704                           ;	MCLR Pin Enable bit
   705                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   706  300005                     	org	3145733
   707  300005  83                 	db	131
   708                           
   709                           ;Config register CONFIG4L @ 0x300006
   710                           ;	Stack Full/Underflow Reset Enable bit
   711                           ;	STVREN = ON, Stack full/underflow will cause Reset
   712                           ;	Single-Supply ICSP Enable bit
   713                           ;	LVP = OFF, Single-Supply ICSP disabled
   714                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   715                           ;	ICPRT = OFF, ICPORT disabled
   716                           ;	Extended Instruction Set Enable bit
   717                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   718                           ;	Background Debugger Enable bit
   719                           ;	DEBUG = 0x1, unprogrammed default
   720  300006                     	org	3145734
   721  300006  81                 	db	129
   722                           
   723                           ; Padding undefined space
   724  300007                     	org	3145735
   725  300007  FF                 	db	255
   726                           
   727                           ;Config register CONFIG5L @ 0x300008
   728                           ;	Code Protection bit
   729                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   730                           ;	Code Protection bit
   731                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   732                           ;	Code Protection bit
   733                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   734                           ;	Code Protection bit
   735                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   736  300008                     	org	3145736
   737  300008  0F                 	db	15
   738                           
   739                           ;Config register CONFIG5H @ 0x300009
   740                           ;	Boot Block Code Protection bit
   741                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   742                           ;	Data EEPROM Code Protection bit
   743                           ;	CPD = OFF, Data EEPROM is not code-protected
   744  300009                     	org	3145737
   745  300009  C0                 	db	192
   746                           
   747                           ;Config register CONFIG6L @ 0x30000A
   748                           ;	Write Protection bit
   749                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   750                           ;	Write Protection bit
   751                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   752                           ;	Write Protection bit
   753                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   754                           ;	Write Protection bit
   755                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   756  30000A                     	org	3145738
   757  30000A  0F                 	db	15
   758                           
   759                           ;Config register CONFIG6H @ 0x30000B
   760                           ;	Configuration Register Write Protection bit
   761                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   762                           ;	Boot Block Write Protection bit
   763                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   764                           ;	Data EEPROM Write Protection bit
   765                           ;	WRTD = OFF, Data EEPROM is not write-protected
   766  30000B                     	org	3145739
   767  30000B  E0                 	db	224
   768                           
   769                           ;Config register CONFIG7L @ 0x30000C
   770                           ;	Table Read Protection bit
   771                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   772                           ;	Table Read Protection bit
   773                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   774                           ;	Table Read Protection bit
   775                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   776                           ;	Table Read Protection bit
   777                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   778  30000C                     	org	3145740
   779  30000C  0F                 	db	15
   780                           
   781                           ;Config register CONFIG7H @ 0x30000D
   782                           ;	Boot Block Table Read Protection bit
   783                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   784  30000D                     	org	3145741
   785  30000D  40                 	db	64
   786                           tosu	equ	0xFFF
   787                           tosh	equ	0xFFE
   788                           tosl	equ	0xFFD
   789                           stkptr	equ	0xFFC
   790                           pclatu	equ	0xFFB
   791                           pclath	equ	0xFFA
   792                           pcl	equ	0xFF9
   793                           tblptru	equ	0xFF8
   794                           tblptrh	equ	0xFF7
   795                           tblptrl	equ	0xFF6
   796                           tablat	equ	0xFF5
   797                           prodh	equ	0xFF4
   798                           prodl	equ	0xFF3
   799                           indf0	equ	0xFEF
   800                           postinc0	equ	0xFEE
   801                           postdec0	equ	0xFED
   802                           preinc0	equ	0xFEC
   803                           plusw0	equ	0xFEB
   804                           fsr0h	equ	0xFEA
   805                           fsr0l	equ	0xFE9
   806                           wreg	equ	0xFE8
   807                           indf1	equ	0xFE7
   808                           postinc1	equ	0xFE6
   809                           postdec1	equ	0xFE5
   810                           preinc1	equ	0xFE4
   811                           plusw1	equ	0xFE3
   812                           fsr1h	equ	0xFE2
   813                           fsr1l	equ	0xFE1
   814                           bsr	equ	0xFE0
   815                           indf2	equ	0xFDF
   816                           postinc2	equ	0xFDE
   817                           postdec2	equ	0xFDD
   818                           preinc2	equ	0xFDC
   819                           plusw2	equ	0xFDB
   820                           fsr2h	equ	0xFDA
   821                           fsr2l	equ	0xFD9
   822                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         0
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     10      24
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_descomponerNumero
    _descomponerNumero->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1443
                                              9 COMRAM     1     1      0
                  _descomponerNumero
 ---------------------------------------------------------------------------------
 (1) _descomponerNumero                                    2     0      2    1443
                                              7 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     615
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _descomponerNumero
     ___lwdiv
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITBIGSFRh          6A      0       0      21        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      A      18       1       25.3%
BITBIGSFRlll        21      0       0      26        0.0%
BITBIGSFRllhl        8      0       0      25        0.0%
BITBIGSFRlhl         6      0       0      23        0.0%
BITBIGSFRllhh        1      0       0      24        0.0%
BITBIGSFRlhh         1      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      18       3        0.0%
DATA                 0      0      18       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sat Mar 19 19:22:55 2022

                       u80 7E90                        l515 7EB6                        l525 7E64  
                      l855 7E84                        l857 7E8C                        l867 7EAC  
                      l883 7E5A                        l875 7E3A                        l891 7F6A  
                      l877 7E42                        u110 7E46                        u137 7F90  
                      u147 7FB2                        u157 7FD4                        u167 7FF6  
                      _dec 0016                        _cen 0017                        _mil 0018  
                      _uni 0015                        wreg 000FE8                       _LATB 000F8A  
                     _LATD 000F8C                       _main 7F5A                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       start 0000  
             ___param_bank 000000                      ?_main 000B            __end_of___lwdiv 7EC0  
          __end_of___lwmod 7E6E                      _PORTB 000F81                      _TRISB 000F93  
                    _TRISD 000F95                      tablat 000FF5                      status 000FD8  
          __initialization 7E06               __end_of_main 8000                     ??_main 0014  
            __activetblptr 000000                  ??___lwdiv 000F                  ??___lwmod 000F  
                   isa$std 000001               __pdataCOMRAM 0001                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                 __accesstop 0060  
  __end_of__initialization 7E26              ___rparam_used 000001             __pcstackCOMRAM 000B  
  descomponerNumero@numero 0012                 __pnvCOMRAM 0015          _descomponerNumero 7EC0  
       ?_descomponerNumero 0012                    __Hparam 0000                    __Lparam 0000  
      ??_descomponerNumero 0014                    ___lwdiv 7E6E                    ___lwmod 7E2C  
                  __pcinit 7E06                    __ramtop 0800                    __ptext0 7F5A  
                  __ptext1 7EC0                    __ptext2 7E2C                    __ptext3 7E6E  
                  _display 0001  __end_of_descomponerNumero 7F5A       end_of_initialization 7E26  
                  postdec1 000FE5                    postinc0 000FEE              __pidataCOMRAM 7DFC  
      start_initialization 7E06           ___lwdiv@dividend 000B                   ?___lwdiv 000B  
                 ?___lwmod 000B           ___lwdiv@quotient 000F                  copy_data0 7E1A  
                 __Hrparam 0000                   __Lrparam 0000            ___lwdiv@divisor 000D  
          ___lwdiv@counter 0011                   isa$xinst 000000           ___lwmod@dividend 000B  
          ___lwmod@divisor 000D            ___lwmod@counter 000F  
